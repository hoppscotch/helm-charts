{{- if not .Values.community.config.database.external }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgresql
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-postgresql
  annotations:
    database/type: "postgresql"
spec:
  serviceName: {{ .Release.Name }}-postgresql
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgresql
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgresql
    spec:
      containers:
      - name: postgresql
        image: {{ .Values.community.config.database.postgresql.image }}
        env:
        - name: POSTGRES_DB
          {{- if .Values.community.config.database.existingSecret.databaseKey }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.community.config.database.existingSecret.secretName | default (printf "%s-db" .Release.Name) }}
              key: {{ .Values.community.config.database.existingSecret.databaseKey }}
          {{- else }}
          value: {{ .Values.community.config.database.database | quote }}
          {{- end }}
        - name: POSTGRES_USER
          {{- if .Values.community.config.database.existingSecret.usernameKey }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.community.config.database.existingSecret.secretName | default (printf "%s-db" .Release.Name) }}
              key: {{ .Values.community.config.database.existingSecret.usernameKey }}
          {{- else }}
          value: {{ .Values.community.config.database.username | quote }}
          {{- end }}
        - name: POSTGRES_PASSWORD
          {{- if .Values.community.config.database.existingSecret.passwordKey }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.community.config.database.existingSecret.secretName | default (printf "%s-db" .Release.Name) }}
              key: {{ .Values.community.config.database.existingSecret.passwordKey }}
          {{- else }}
          value: {{ .Values.community.config.database.password | quote }}
          {{- end }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgresql
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
          subPath: pgdata  # Added this line
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.community.config.database.postgresql.persistence.storageClass }}
      {{- if (eq "-" .Values.community.config.database.postgresql.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.community.config.database.postgresql.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.community.config.database.postgresql.persistence.size }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-postgresql
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-postgresql
  annotations:
    service/database: "postgresql"
spec:
  ports:
  - port: 5432
    targetPort: postgresql
    protocol: TCP
    name: postgresql
  selector:
    app: {{ .Release.Name }}-postgresql
{{- end }}
